define("BaseSchemaModuleV2", ["performancecountermanager", "GoogleTagManagerUtilities", "SchemaBuilderV2", "BaseModule"],
	function(performanceManager, GoogleTagManagerUtilities) {

	/**
	 * @class Terrasoft.configuration.BaseSchemaModule
	 * Базовый класс конфигурационного модуля.
	 */
	Ext.define("Terrasoft.configuration.BaseSchemaModule", {
		extend: "Terrasoft.BaseModule",
		alternateClassName: "Terrasoft.BaseSchemaModule",

		Ext: null,
		sandbox: null,
		Terrasoft: null,

		/**
		 * Признак того, что параметры схемы установлены извне.
		 * @public
		 * @type {Boolean}
		 */
		isSchemaConfigInitialized: false,

		/**
		 * Признак того, что при загрузке модуля используется состояние истории.
		 * @public
		 * @type {Boolean}
		 */
		useHistoryState: true,

		/**
		 * Название схемы отображаемой сущности
		 * @protected
		 * @type {String}
		 */
		schemaName: "",

		/**
		 * Суффикс контейнера модуля
		 * @private
		 * @type {String}
		 */
		autoGeneratedContainerSuffix: "Container",

		/**
		 * Признак того, что модуль инциализируется асинхронно
		 * @private
		 * @type {Boolean}
		 */
		isAsync: true,

		/**
		 * Экземпляр {Terrasoft.SchemaBuilder} для генерации представления и модели представления по иерархии страниц
		 * @private
		 * @type {Terrasoft.SchemaBuilder}
		 */
		schemaBuilder: null,

		/**
		 * Признак того, что для контейнера представления модуля необходимо генерировать идентификатор.
		 * @protected
		 * @type {Boolean}
		 */
		generateViewContainerId: true,

		/**
		 * Инициализирует название схемы
		 * @protected
		 * @virtual
		 */
		initSchemaName: function() {
			var historyState = this.sandbox.publish("GetHistoryState");
			var hash = historyState.hash;
			var state = historyState.state;
			this.schemaName = state.cardSchemaName || hash.entityName || "";
		},

		/**
		 * Заменяет последний элемент в цепочке состояний, если его идентификатор модуля отличается от текущего
		 * @protected
		 * @virtual
		 */
		initHistoryState: function() {
			var sandbox = this.sandbox;
			var state = sandbox.publish("GetHistoryState");
			var currentHash = state.hash;
			var currentState = state.state || {};
			if (currentState.moduleId === sandbox.id) {
				return;
			}
			var newState = this.prepareHistorySate(currentState);
			sandbox.publish("ReplaceHistoryState", {
				stateObj: newState,
				pageTitle: null,
				hash: currentHash.historyState,
				silent: true
			});
		},

		/**
		 * Подготавливает новое состояние страницы
		 * @protected
		 * @virtual
		 * @return {Object} Возвращает новое состояние страницы
		 */
		prepareHistorySate: function(currentState) {
			var newState = this.Terrasoft.deepClone(currentState);
			newState.moduleId = this.sandbox.id;
			return newState;
		},

		/**
		 * Получает ключ профиля
		 * @return {String} Возращает ключ профиля
		 */
		getProfileKey: function() {
			return this.schemaName;
		},

		/**
		 * Генерирует класс для текущей схемы, классы родителей, представление
		 * @private
		 * @param {Function} callback Эта функция будет вызвана после генерации. Входящими параметрами будут класс
		 * схемы, структура представления
		 * @param {Object} scope Контекст вызова callback-функции
		 */
		generateSchemaStructure: function(callback, scope) {
			var config = {
				schemaName: this.schemaName,
				entitySchemaName: this.entitySchemaName,
				profileKey: this.getProfileKey()
			};
			this.schemaBuilder.build(config, function(viewModelClass, viewConfig) {
				callback.call(scope, viewModelClass, viewConfig);
			}, this);
		},

		/**
		 * Инициализация состояние, названия схемы, генерирует класс модели представления и представление.
		 * После этого создает и инициализирует экземпляр представления
		 * @param {Function} callback Функция, которая будет вызвана по завершению
		 * @param {Object} scope Контекст, в котором будет вызвана функция callback
		 * @virtual
		 */
		init: function(callback, scope) {
			callback = callback || function() {};
			if (this.viewModel) {
				this.viewModel.set("Restored", true);
				callback.call(scope);
				return;
			}
			this.schemaBuilder = this.Ext.create("Terrasoft.SchemaBuilder");
			if (this.useHistoryState) {
				this.initHistoryState();
			}
			if (!this.isSchemaConfigInitialized) {
				this.initSchemaName();
			}

			GoogleTagManagerUtilities.actionModule({
				virtualUrl: this.Terrasoft.workspaceBaseUrl + "/" + this.sandbox.id,
				moduleName: this.schemaName,
				currentAction: this.operation,
				primaryColumnValue: this.primaryColumnValue,
				typeModule : this.getViewModelConfig().sandbox.moduleName
			});

			this.generateSchemaStructure(function(viewModelClass, viewConfig) {
				if (this.destroyed) {
					return;
				}
				this.viewModelClass = viewModelClass;
				this.viewConfig = viewConfig;
				var viewModel = this.viewModel = this.createViewModel(viewModelClass);
				viewModel.init(function() {
					if (!this.destroyed) {
						callback.call(scope);
					}
				}, this);
			}, this);
		},

		/**
		 * Возвращает объект настроек модели представления.
		 * @protected
		 * @virtual
		 * @return {Object} Возвращает объект настроек модели представления.
		 */
		getViewModelConfig: function() {
			var viewModelConfig = {
				Ext: this.Ext,
				sandbox: this.sandbox,
				Terrasoft: this.Terrasoft
			};
			return viewModelConfig;
		},

		/**
		 * Создает модель представления
		 * @protected
		 * @virtual
		 * @param {Object} viewModelClass Класс модели представления схемы
		 * @return {Object} Возвращает экземпляр модели представления схемы
		 */
		createViewModel: function(viewModelClass) {
			var viewModelConfig = this.getViewModelConfig();
			return this.Ext.create(viewModelClass, viewModelConfig);
		},

		/**
		 * Возвращает идентификатор контейнера представления модуля.
		 * @protected
		 * @virtual
		 * @return {String} Идентификатор контейнера представления модуля.
		 */
		getViewContainerId: function() {
			return this.schemaName + this.autoGeneratedContainerSuffix;
		},

		/**
		 * Возвращает конфигурацию представления модуля.
		 * @protected
		 * @virtual
		 * @return {Object} Конфигурация представления модуля.
		 */
		getViewConfig: function() {
			var containerId = this.getViewContainerId();
			var viewConfig = {
				classes: {wrapClassName: ["schema-wrap", "one-el"]},
				items: this.Terrasoft.deepClone(this.viewConfig),
				markerValue: containerId
			};
			if (this.generateViewContainerId !== false) {
				this.Ext.apply(viewConfig, {
					id: containerId,
					selectors: {wrapEl: "#" + containerId}
				});
			}
			return viewConfig;
		},

		/**
		 * Отображение представления
		 * @param {Ext.Element} renderTo Ссылка на контейнер, в котором будет отображаться представление.
		 */
		render: function(renderTo) {
			var viewModel = this.viewModel;
			var view = this.view;
			if (!view || view.destroyed) {
				var viewConfig = this.getViewConfig();
				view = this.view = this.Ext.create("Terrasoft.Container", viewConfig);
				view.bind(viewModel);
				performanceManager.stop(this.sandbox.id + "_BeforeRender");
				performanceManager.start(this.sandbox.id + "_Render");
				view.render(renderTo);
			} else {
				performanceManager.stop(this.sandbox.id + "_BeforeRender");
				performanceManager.start(this.sandbox.id + "_Render");
				view.reRender(0, renderTo);
			}
			viewModel.renderTo = renderTo.id;
			performanceManager.stop(this.sandbox.id + "_Render");
			viewModel.onRender();
		},

		/**
		 * Очищает все подписки на события и уничтожает объект.
		 * @overridden
		 * @param {Object} config Параметры уничтожения модуля
		 */
		destroy: function(config) {
			if (config.keepAlive !== true) {
				if (this.viewModel) {
					this.viewModel.destroy();
					this.viewModel = null;
				}
				if (this.schemaBuilder) {
					this.schemaBuilder = null;
				}
				this.callParent(arguments);
			}
		}
	});

	return Terrasoft.BaseSchemaModule;
});

define("StructureExploreModule", ["StructureExploreModuleResources", "StructureExplorerView",
	"StructureExplorerViewModel", "EntityStructureHelper", "StructureExplorerUtilities", "MaskHelper"],
	function(resources, StructureExplorerView, StructureExplorerViewModel, EntityStructureHelper,
			StructureExplorerUtilities, MaskHelper) {
		function createConstructor(context) {

			var Ext = context.Ext;
			var sandbox = context.sandbox;
			var Terrasoft = context.Terrasoft;
			var view, viewModel, rootItemIdentifier, params;

			function filtersHandler() {
				if (params.columnPath) {
					var filters = params.columnPath.split(".");
					if (filters.length > 1) {
						showFilterTree(getLastViewModel(), filters, 0);
					} else if (filters.length === 1) {
						showFilterColumn(filters[0]);
					}
				}
			}

			function getRootItemIdentifier() {
				if (typeof rootItemIdentifier === "undefined") {
					var indentifier = sandbox.publish("GetStructureExplorerSchemaName", null, [sandbox.id]);
					if (indentifier) {
						rootItemIdentifier = {referenceSchemaName: indentifier};
					} else {
						var historyState = sandbox.publish("GetHistoryState");
						rootItemIdentifier = {referenceSchemaName: historyState.hash.entityName};
					}
				}
				return rootItemIdentifier;
			}

			function hasBackwardElements() {
				var pathItems = viewModelCollection.getItems();
				for (var i = 0; i < pathItems.length; i++) {
					var pathItem = pathItems[i].get("EntitySchemaColumn");
					if (pathItem && pathItem.isBackward) {
						return true;
					}
				}
				return false;
			}

			function setSourceItems(identifier, callback, scope) {
				EntityStructureHelper.getItems(identifier, function(items) {
					var itemCollection = viewModel.get("EntitySchemaColumnList");
					itemCollection.clear();
					itemCollection.collection.addAll(items);
					if (callback) {
						callback.call(scope || this, items);
					}
				}, hasBackwardElements(), scope || this);
			}
			function setItemChildren(identifier, itemViewModel, callback, scope) {
				EntityStructureHelper.getChildren(identifier, function(items) {
					var itemCollection = itemViewModel.get("EntitySchemaColumnList");
					itemCollection.clear();
					itemCollection.collection.addAll(items);
					if (callback) {
						callback.call(scope || this, items);
					}
				}, scope || this);
			}
			function getLastSelectedShemaName() {
				var lastIndex = viewModelCollection.getCount() - 1;
				if (lastIndex === -1) {
					return getRootItemIdentifier();
				}
				return viewModelCollection.get(lastIndex).get("EntitySchemaColumn");
			}
			function getLastViewModel() {
				var lastIndex = viewModelCollection.getCount() - 1;
				if (lastIndex === -1) {
					return viewModel;
				}
				return viewModelCollection.get(lastIndex);
			}
			function updateAfterRemovingItem(itemViewModel) {
				itemViewModel.set("ExpandVisible", true);
				itemViewModel.set("RemoveVisible", false);
				itemViewModel.set("ComboBoxListEnabled", true);
				viewModel.set("ComboBoxListEnabled", true);
				viewModel.set("EntitySchemaColumn", null);
				var identifier = getRootItemIdentifier();
				if (itemViewModel !== viewModel) {
					var comboBoxValue = itemViewModel.get("EntitySchemaColumn");
					identifier = comboBoxValue;
				}
				setSourceItems(identifier);
			}
			function expandBase() {
				this.set("ExpandVisible", false);
				this.set("RemoveVisible", true);
				this.set("ComboBoxListEnabled", false);
				viewModel.set("ComboBoxListEnabled", false);
				viewModel.set("EntitySchemaColumn", null);
				var itemViewModel = StructureExplorerViewModel.generateItem();
				itemViewModel.ComboBoxListChange = function(comboBoxValue) {
					this.set("ExpandEnable", true);
					itemViewModel.set("EntitySchemaColumn", Terrasoft.deepClone(comboBoxValue));
					if (!comboBoxValue) {
						viewModel.set("ComboBoxListEnabled", false);
					} else {
						setSourceItems(comboBoxValue, function() {
							viewModel.set("ComboBoxListEnabled", true);
						});
					}
					viewModel.set("EntitySchemaColumn", null);
				};
				itemViewModel.expand = expandBase;
				itemViewModel.remove = function() {
					removeItemsByViewModel(this, 0);
					var itemViewModel = getLastViewModel();
					updateAfterRemovingItem(itemViewModel);
				};
				itemViewModel.close = function() {
					removeItemsByViewModel(this, 1);
					updateAfterRemovingItem(this);

				};
				var viewConfig = StructureExplorerView.generateItemView(itemViewModel, getIndex());
				var itemView = Ext.create(viewConfig.className || "Terrasoft.Container", viewConfig);
				setItemChildren(getLastSelectedShemaName(), itemViewModel,
					function() {
						addItems(itemView, itemViewModel);
						itemView.bind(itemViewModel);
						itemView.render(view.items.get("autoGeneratedMainContainer")
							.items.get(
								"autoGeneratedLeftContainer").getWrapEl());
					});
			}

			function showFilterColumn(columnName) {
				var col = viewModel.get("EntitySchemaColumnList").collection.items;
				for (var k = 0; k < col.length; k++) {
					if (col[k].columnName === columnName) {
						viewModel.set("EntitySchemaColumn", col[k]);
						break;
					}
				}
			}

			function showFilterTree(vModel, filterItems, position) {
				vModel.set("ExpandVisible", false);
				vModel.set("RemoveVisible", true);
				vModel.set("ComboBoxListEnabled", false);
				viewModel.set("ComboBoxListEnabled", false);
				viewModel.set("EntitySchemaColumn", null);
				var itemViewModel = StructureExplorerViewModel.generateItem();

				itemViewModel.ComboBoxListChange = function() {
					this.set("ExpandEnable", true);
					var comboBoxValue = this.get("EntitySchemaColumn");
					if (!comboBoxValue) {
						viewModel.set("ComboBoxListEnabled", false);
					} else {
						setSourceItems(comboBoxValue, function() {
							viewModel.set("ComboBoxListEnabled", true);
						});
					}
					viewModel.set("EntitySchemaColumn", null);
				};
				itemViewModel.expand = expandBase;
				itemViewModel.remove = function() {
					removeItemsByViewModel(this, 0);
					var itemViewModel = getLastViewModel();
					updateAfterRemovingItem(itemViewModel);
				};
				itemViewModel.close = function() {
					removeItemsByViewModel(this, 1);
					updateAfterRemovingItem(this);

				};
				var viewConfig = StructureExplorerView.generateItemView(itemViewModel, getIndex());
				var itemView = Ext.create(viewConfig.className || "Terrasoft.Container", viewConfig);
				setItemChildren(getLastSelectedShemaName(), itemViewModel,
					function() {
						addItems(itemView, itemViewModel);
						itemView.bind(itemViewModel);
						itemView.render(view.items.get("autoGeneratedMainContainer")
							.items.get(
								"autoGeneratedLeftContainer").getWrapEl());

						if (filterItems.length > position + 1) {
							var obj = itemViewModel.get("EntitySchemaColumnList").collection.items;
							for (var j = 0; j < obj.length; j++) {
								if (obj[j].columnName === filterItems[position]) {
									itemViewModel.set("EntitySchemaColumn", obj[j]);
									rootItemIdentifier.referenceSchemaName = obj[j].referenceSchemaName;
									break;
								}
							}
							position = position + 1;
							if (filterItems.length > position + 1) {
								showFilterTree(itemViewModel, filterItems, position);
							} else {
								setSourceItems(getLastSelectedShemaName(), function() {
									showFilterColumn(filterItems[filterItems.length - 1]);
								});
							}
						}
					});
			}

			function render(renderTo) {
				params = sandbox.publish("StructureExplorerInfo", null, [sandbox.id]);
				if (params === null) {
					params = {
						summaryColumnsOnly: false,
						useBackwards: true,
						firstColumnsOnly: false
					};
				}
				if (typeof params.schemaName !== "undefined") {
					rootItemIdentifier = {referenceSchemaName: params.schemaName};
				}
				params.sa = sandbox;
				EntityStructureHelper.init(params);
				var schemaName = getRootItemIdentifier();
				viewModel = StructureExplorerViewModel.generate();
				viewModel.structureExplorerId = sandbox.id;
				if (params.firstColumnsOnly) {
					viewModel.set("ExpandVisible", false);
				}
				viewModel.select = function() {
					var pathItems = viewModelCollection.getItems();
					var responce = {
						path: [],
						metaPath: [],
						caption: [],
						isBackward: false
					};

					var backwardReferenceSchemaName = "";
					for (var i = 0; i < pathItems.length; i++) {
						var isPathItemValid = pathItems[i].validate();
						if (!isPathItemValid) {
							MaskHelper.HideBodyMask();
							return;
						}
						var pathItem = pathItems[i].get("EntitySchemaColumn");
						responce.metaPath[responce.metaPath.length] = pathItem.value;
						responce.path[responce.path.length] = pathItem.columnName;
						responce.caption[responce.caption.length] = pathItem.displayValue;
						if (pathItem.isBackward) {
							responce.isBackward = true;
							backwardReferenceSchemaName = pathItem.referenceSchemaName;
							if (pathItems.length > 1) {
								responce.hideFilter = true;
							}
						}
					}
					var isValid = this.validate();
					if (!isValid) {
						MaskHelper.HideBodyMask();
						return;
					}
					var columnValue = viewModel.get("EntitySchemaColumn");
					if (columnValue.isAggregative) {
						responce.aggregationFunction = columnValue.aggregationFunction;
						responce.isAggregative = true;
						responce.leftExpressionCaption = responce.caption.join(".");
						var lastPathElement = responce.path[responce.path.length - 1];
						var columnIsNotSelectedRegExp = new RegExp("]$", "ig");
						if (columnIsNotSelectedRegExp.test(lastPathElement)) {
							responce.path.push("Id");
						}
					} else {
						responce.metaPath[responce.metaPath.length] = columnValue.value;
						responce.path[responce.path.length] = columnValue.columnName;
						responce.caption[responce.caption.length] = columnValue.displayValue;
						responce.leftExpressionCaption = responce.caption.join(".");
					}
					responce.leftExpressionColumnPath = responce.path.join(".");
					responce.dataValueType = columnValue.dataValueType;
					if (columnValue.isLookup) {
						responce.isLookup = columnValue.isLookup;
						responce.referenceSchemaName = columnValue.referenceSchemaName;
					}
					if (!responce.referenceSchemaName && backwardReferenceSchemaName) {
						responce.referenceSchemaName = backwardReferenceSchemaName;
					}
					sandbox.publish("ColumnSelected", responce, [sandbox.id]);
					StructureExplorerUtilities.Close();
				};
				viewModel.expand = expandBase;
				viewModel.close = function() {
					removeItemsByKey(0);
					var identifier = getRootItemIdentifier();
					setSourceItems(identifier, function() {
						this.set("ExpandVisible", true);
						this.set("RemoveVisible", false);
						this.set("EntitySchemaColumn", null);
						this.set("ComboBoxListEnabled", true);
					}, this);
				};

				var viewConfig = StructureExplorerView.generateMainView(viewModel);
				view = Ext.create(viewConfig.className || "Terrasoft.Container", viewConfig);
				var viewRenderTo = renderTo;
				var page = Ext.getCmp("autoGeneratedBottomContainer");
				page.on("afterrender", filtersHandler, this);
				page.on("afterrender", afterRender, this);

				EntityStructureHelper.getItemCaption(schemaName, function(name) {
					viewModel.set("caption", name);
					setSourceItems(schemaName, function() {
						view.bind(viewModel);
						view.render(viewRenderTo);
					});
				}, this);
			}

			var viewCollection = new Terrasoft.Collection();//collection of views for child elements
			var viewModelCollection = new Terrasoft.Collection();//collection of view models for child elements
			function addItems(view, viewModel) {
				var key = viewCollection.getCount();
				viewModel.set("elementKey", key);
				viewCollection.add(key, view);
				viewModelCollection.add(key, viewModel);
			}
			function getIndex() {
				return viewModelCollection.getCount();
			}
			function removeItemsByKey(index) {
				while (viewCollection.contains(index) || viewModelCollection.contains(index)) {
					viewCollection.removeByKey(index).destroy();
					viewModelCollection.removeByKey(index++).destroy();
				}
			}
			function removeItemsByViewModel(viewModel, offset) {
				var index = viewModel.get("elementKey") + offset;
				while (viewCollection.contains(index) || viewModelCollection.contains(index)) {
					viewModelCollection.removeByKey(index).destroy();
					viewCollection.removeByKey(index).destroy();
					index++;
				}
			}
			function afterRender() {

				var itemEdit = Ext.getCmp("itemComboBox");
				itemEdit.getEl().focus();
			}
			return Ext.define("StructureExploreModule", {
				render: render
			});
		}
		return createConstructor;
	});
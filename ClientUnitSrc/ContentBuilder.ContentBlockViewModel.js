define("ContentBlockViewModel", ["ContentBlockViewModelResources"], function(resources) {

	/**
	 * @class Terrasoft.controls.ContentBlockViewModel
	 */
	Ext.define("Terrasoft.ContentBlockViewModel", {
		extend: "Terrasoft.BaseViewModel",

		/**
		 * Имя класса элемента отображения.
		 * @protected
		 * @type {String}
		 */
		className: "Terrasoft.ContentBlock",

		/**
		 * Инициализирует модель значениями ресурсов из объекта ресурсов.
		 * @protected
		 * @virtual
		 * @param {Object} resourcesObj Объект ресурсов.
		 */
		initResourcesValues: function(resourcesObj) {
			var resourcesSuffix = "Resources";
			Terrasoft.each(resourcesObj, function(resourceGroup, resourceGroupName) {
				resourceGroupName = resourceGroupName.replace("localizable", "");
				Terrasoft.each(resourceGroup, function(resourceValue, resourceName) {
					var viewModelResourceName = [resourcesSuffix, resourceGroupName, resourceName].join(".");
					this.set(viewModelResourceName, resourceValue);
				}, this);
			}, this);
		},

		/**
		 * Кененирует объект конфигурации представления элемента.
		 * @return {Object} Объект конфигурации представления.
		 */
		getViewConfig: function() {
			var id = this.get("Id");
			return {
				"className": this.className,
				"items": {bindTo: "Items"},
				"selected": {bindTo: "Selected"},
				"tag": id,
				"id": id,
				"ondragover": {bindTo: "onDragOver"},
				"ondragdrop": {bindTo: "onDragDrop"},
				"oninvaliddrop": {bindTo: "onInvalidDrop"},
				"groupName": ["ContentBlank"],
				"tools": this.getToolsConfig(),
				"getDraggableConfig": function() {
					var draggableConfig = {};
					draggableConfig[Terrasoft.DragAction.MOVE] = {
						autoGenerateDraggableElement: false,
						elementId: this.id + "dragg-el-wrapperEl",
						handlers: {
							b4StartDrag: "b4StartDrag",
							onDragEnter: "onDragEnter",
							onDragDrop: "onDragDrop",
							onInvalidDrop: "onDragDrop"
						}
					};
					draggableConfig[Terrasoft.DragAction.RESIZE_BOTTOM] = {
						handlers: {
							b4StartDrag: "b4ResizeBottomStartDrag",
							onDrag: Terrasoft.emptyFn,
							onDragDrop: "reRender",
							onInvalidDrop: "reRender"
						}
					};
					return draggableConfig;
				}
			};
		},

		/**
		 * @inheritdoc Terrasoft.BaseViewModel#constructor
		 * @overridden
		 */
		constructor: function() {
			this.callParent(arguments);
			var collection = this.get("Items") || Ext.create("Terrasoft.BaseViewModelCollection");
			collection.on("itemChanged", this.onItemChanged, this);
			this.on("change:Selected", this.onSelectedChanged, this);
			this.set("Items", collection);
			this.initResourcesValues(resources);
		},

		/**
		 * Возвращает объект конфигураций инструментов блока контента.
		 * @protected
		 * @virtual
		 * @return {Array} Объект конфигураций инструментов блока контента..
		 */
		getToolsConfig: function() {
			var id = this.get("Id");
			return [
				{
					className: "Terrasoft.Button",
					id: id + "dragg-el",
					style: Terrasoft.controls.ButtonEnums.style.GREEN,
					markerValue: "move-button",
					imageConfig: {bindTo: "Resources.Images.ContentBlockMove"}
				}, {
					className: "Terrasoft.Button",
					style: Terrasoft.controls.ButtonEnums.style.BLUE,
					markerValue: "copy-button",
					imageConfig: {bindTo: "Resources.Images.ContentBlockAdd"},
					click: {bindTo: "onCopyButtonClick"}
				}, {
					className: "Terrasoft.Button",
					style: Terrasoft.controls.ButtonEnums.style.RED,
					markerValue: "remove-button",
					imageConfig: {bindTo: "Resources.Images.ContentBlockRemove"},
					click: {bindTo: "onRemoveButtonClick"}
				}
			];
		},

		/**
		 * Обработчик события 'itemChanged' коллекции Terrasoft.Collection.
		 * @protected
		 * @virtual
		 * @param {Terrasoft.BaseViewModel} item Элемент коллекции, в котором произошли изменения.
		 * @param {Object} config Параметры события.
		 */
		onItemChanged: function(item, config) {
			if (config.event) {
				switch (config.event) {
					case "onselected":
						this.onItemSelected(config.arguments);
						break;
					case "macrobuttonclicked":
						this.fireEvent("change", this, {
							event: "macrobuttonclicked",
							arguments: config.arguments
						});
						break;
					case "selectedtextсhanged":
						this.fireEvent("change", this, {
							event: "selectedtextсhanged",
							arguments: config.arguments
						});
						break;
				}
			}
		},

		/**
		 * Обрабатывает события выделенности дочернего элемента.
		 * @protected
		 * @virtual
		 * @param {Object} config Конфигурационный объект.
		 */
		onItemSelected: function(config) {
			var itemId = config.Id;
			var collection = this.get("Items");
			collection.each(function(contentItem) {
				if (contentItem.get("Id") !== itemId) {
					contentItem.set("Selected", false);
				}
			}, this);
			this.set("Selected", true);
		},

		/**
		 * Генерирует события перетаскивания блока.
		 * @protected
		 */
		onDragOver: function() {
			this.fireEvent("change", this, {
				event: "ondragover",
				arguments: arguments
			});
		},

		/**
		 * Генерирует события вставки блока.
		 * @protected
		 */
		onDragDrop: function() {
			this.fireEvent("change", this, {
				event: "ondragdrop",
				arguments: arguments
			});
		},

		/**
		 * Генерирует события невалидного перетаскивания блока.
		 * @protected
		 */
		onInvalidDrop: function() {
			this.fireEvent("change", this, {
				event: "oninvaliddrop",
				arguments: arguments
			});
		},

		/**
		 * Обрабатывет изменени выделенного элемента.
		 * @protected
		 * @virtual
		 */
		onSelectedChanged: function(model, value) {
			if (!value) {
				var collection = this.get("Items");
				collection.each(function(contentItem) {
					contentItem.set("Selected", false);
				}, this);
			}
			this.fireEvent("change", this, {
				event: "onselected",
				arguments: {
					Id: this.get("Id"),
					value: value
				}
			});
		},

		/**
		 * Обработчик клика кнопки удаления.
		 * @protected
		 * @virtual
		 */
		onRemoveButtonClick: function() {
			this.fireEvent("change", this, {
				event: "onremove",
				arguments: {Id: this.get("Id")}
			});
		},

		/**
		 * Обработчик клика кнопки копирования.
		 * @protected
		 * @virtual
		 */
		onCopyButtonClick: function() {
			this.fireEvent("change", this, {
				event: "oncopy",
				arguments: {Id: this.get("Id")}
			});
		}
	});

	return Terrasoft.ContentBlockViewModel;
});

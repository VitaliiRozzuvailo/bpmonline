define("ModalBoxSchemaModule", ["ext-base", "ModalBox", "BaseSchemaModuleV2"],
	function(Ext, ModalBox) {

		Ext.define("Terrasoft.configuration.ModalBoxSchemaModule", {
			extend: "Terrasoft.BaseSchemaModule",
			alternateClassName: "Terrasoft.ModalBoxSchemaModule",

			/**
			 * Конфигурация открытия модального окна
			 * @protected
			 * @type {Object}
			 */
			modalBoxSize: {
				minHeight: "1",
				minWidth: "1",
				maxHeight: "100",
				maxWidth: "100"
			},

			/**
			 * Название контейнера для отображения.
			 * @type {String}
			 */
			renderTo: "ModalBox",

			/**
			 * Контейнер в который будет отрисован модуль.
			 * @protected
			 * @type {Object}
			 */
			modalBoxContainer: null,

			/**
			 * Представление шапки модуля.
			 * @protected
			 * @type {Object}
			 */
			headerView: null,

			/**
			 * Конфигурация модуля.
			 * @protected
			 * @type {Object}
			 */
			moduleInfo: null,

			/**
			 * Возвращает фиксированный контейнер в модальном окне.
			 * @protected
			 * @virtual
			 * @return {Object} Фиксированный контейнер в модальном окне.
			 */
			getFixedHeaderContainer: function() {
				return ModalBox.getFixedBox();
			},

			/**
			 * Возвращает основной контейнер в модальном окне.
			 * @protected
			 * @virtual
			 * @return {Object} Основной контейнер в модальном окне.
			 */
			getContentContainer: function() {
				return this.modalBoxContainer;
			},

			/**
			 * Обновляет размеры окна в соответствии с контентом.
			 * @protected
			 * @virtual
			 */
			updateSize: function(width, height) {
				if (width && height) {
					ModalBox.setSize(width, height);
				} else {
					ModalBox.updateSizeByContent();
				}
			},

			/**
			 * Подготавливает модальное окно.
			 * @protected
			 * @virtual
			 */
			prepareModalBox: function() {
				if (!this.modalBoxContainer) {
					this.modalBoxContainer = ModalBox.show(this.modalBoxSize);
					ModalBox.setSize(820, 600);
				}
			},

			/**
			 * Закрывает модальное окно.
			 * @protected
			 * @virtual
			 */
			closeModalBox: function() {
				if (this.modalBoxContainer) {
					ModalBox.close();
					this.modalBoxContainer = null;
				}
			},

			/**
			 * Инициализирует название схемы.
			 * @protected
			 * @virtual
			 */
			initSchemaName: function() {
				var moduleInfo = this.moduleInfo =
					(this.moduleInfo || this.sandbox.publish("GetModuleInfo", null, [this.sandbox.id]));
				this.schemaName = moduleInfo.schemaName;
				this.entitySchemaName = moduleInfo.entitySchemaName;
			},

			/**
			 * Убирает логику по инициализации состояния модуля.
			 * @protected
			 * @virtual
			 */
			initHistoryState: Terrasoft.emptyFn,

			/**
			 * Возвращает объект настроек модели представления.
			 * @protected
			 * @virtual
			 * @return {Object} Объект настроек модели представления.
			 */
			getViewModelConfig: function() {
				var viewModelConfig = this.callParent(arguments);
				Ext.merge(viewModelConfig, {
					values: {moduleInfo: this.moduleInfo}
				});
				return viewModelConfig;
			},

			/**
			 * Инициализация состояние, названия схемы, генерирует класс модели представления и представление.
			 * После этого создает и инициализирует экземпляр представления
			 * @param {Function} callback Функция, которая будет вызвана по завершению
			 * @param {Object} scope Контекст, в котором будет вызвана функция callback
			 * @virtual
			 */
			init: function(callback, scope) {
				this.callParent([function() {
					this.viewModel.destroyModule = this.destroyModule.bind(this);
					this.viewModel.updateSize = this.updateSize;
					callback.call(scope || this);
				}, this]);

			},

			/**
			 * Отображение представления.
			 * @virtual
			 */
			render: function() {
				this.prepareModalBox();
				var renderTo = this.getContentContainer();
				var headerRenderTo = this.getFixedHeaderContainer();
				var containerName = this.schemaName + this.autoGeneratedContainerSuffix;
				var headerContainerName = this.schemaName + this.autoGeneratedContainerSuffix + "header";
				var viewModel = this.viewModel;
				var view = this.view;
				var headerView = this.headerView;
				if (!view || view.destroyed || !headerView || headerView.destroyed) {
					view = this.view = this.Ext.create("Terrasoft.Container", {
						id: containerName,
						selectors: {wrapEl: "#" + containerName},
						classes: {wrapClassName: ["modal-box-schema-module-content", "schema-wrap", "one-el"]},
						items: Terrasoft.deepClone(this.viewConfig[0])
					});
					headerView = this.headerView = this.Ext.create("Terrasoft.Container", {
						id: headerContainerName,
						selectors: {wrapEl: "#" + headerContainerName},
						classes: {wrapClassName: ["modal-box-schema-module-header", "schema-wrap", "one-el"]},
						items: Terrasoft.deepClone(this.viewConfig[1])
					});
					view.bind(viewModel);
					view.render(renderTo);
					headerView.bind(viewModel);
					headerView.render(headerRenderTo);
				} else {
					view.reRender(0, renderTo);
					headerView.reRender(0, headerRenderTo);
				}
				viewModel.headerRenderTo = headerRenderTo.id;
				viewModel.renderTo = renderTo.id;
				viewModel.onRender();
			},

			/**
			 * Закрывает модально окно и иничтожает модуль.
			 * @virtual
			 */
			destroyModule: function() {
				this.closeModalBox();
				this.sandbox.unloadModule(this.sandbox.id);
			}
		});

		return Terrasoft.ModalBoxSchemaModule;
	});

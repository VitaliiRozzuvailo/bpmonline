define("ProcessCardModuleV2", ["ProcessHelper", "UserQuestionProcessPageV2Utilities", "AutoGeneratedPageV2Utilities",
	"BusinessRulesApplierV2", "ActivityPageV2Utilities", "ProcessModuleUtilities", "CardModuleV2"],
	function(ProcessHelper, UserQuestionProcessPageV2Utilities, AutoGeneratedPageV2Utilities, BusinessRulesApplier,
			ActivityPageV2Utilities, ProcessModuleUtilities) {
		/**
		 * @class Terrasoft.configuration.ProcessCardModule
		 * Это класс, который используется для создания модуля картчоки по процессу
		 */
		Ext.define("Terrasoft.configuration.ProcessCardModule", {
			alternateClassName: "Terrasoft.ProcessCardModule",
			// TODO Когда полностью заработает наследование клиентских схем, указать родительскую схему CardModuleV2,
			// удалить продублированные сообщения
			extend: "Terrasoft.CardModule",
			/**
			 * @overridden
			 */
			init: function() {
				var parentInit = this.getParentMethod();
				var parentArguments = arguments;
				this.initPrcExecData(function() {
					parentInit.apply(this, parentArguments);
				});
			},
			/**
			 * Возвращает родительский метод
			 * Работает как callParent, только без вызова
			 * @return {Function}
			 */
			getParentMethod: function() {
				var method,
					superMethod = (method = this.getParentMethod.caller) && (method.$previous ||
						((method = method.$owner ? method : method.caller) && method.$owner.superclass[method.$name]));
				return superMethod;
			},
			/**
			 * @protected
			 */
			initCustomMethods: function(schemaName) {
				if (schemaName === "UserQuestionProcessPageV2") {
					this.setCustomMethods(UserQuestionProcessPageV2Utilities);
				} else if (schemaName === "AutoGeneratedPageV2") {
					this.setCustomMethods(AutoGeneratedPageV2Utilities);
				} else if (schemaName === "ActivityPageV2" || schemaName === "EmailPageV2") {
					this.setCustomMethods(ActivityPageV2Utilities);
				}
			},
			/**
			 * @protected
			 * @param implementor
			 */
			setCustomMethods: function(implementor) {
				this.getCustomDiff = implementor.getCustomDiff;
				this.getCustomAttributes = implementor.getCustomAttributes;
				this.getCustomValues = implementor.getCustomValues;
			},
			/**
			 * @overridden
			 */
			initSchemaName: function() {
				var historyState = this.sandbox.publish("GetHistoryState");
				var hash = historyState.hash;
				this.schemaName = hash.entityName;
				this.operation = hash.operationType;
				this.primaryColumnValue = hash.recordId;
				this.initCustomMethods(this.schemaName);
			},
			/**
			 * Устанавливает параметры в данных по процессу.
			 * @private
			 */
			setPrcExecDataParameters: function() {
				if (!this.prcExecData || Ext.isEmpty(this.prcExecData.parameters)) {
					return;
				}
					this.Terrasoft.each(this.prcExecData.parameters, function(param, name) {
					if (param && !this.Ext.isEmpty(param.dataValueType)) {
								this.prcExecData.parameters[name] =
									ProcessHelper.getClientValueByDataValueType(param.value, param.dataValueType);
							}
				}, this);
			},
			/**
			 * Инициализурует данные по процессу.
			 * @param {Function} callback Функция обратного вызова
			 * @protected
			 */
			initPrcExecData: function(callback) {
				this.prcExecData = ProcessHelper.getProcessElementData(this.sandbox);
				if (this.prcExecData) {
					this.setPrcExecDataParameters();
					callback.call(this);
					return;
						}
				var historyState = this.sandbox.publish("GetHistoryState");
				var hash = historyState.hash;
				var config = {
					procElUId: hash.valuePairs[0].name,
					recordId: hash.recordId,
					callbackMethod: function() {
						this.prcExecData = ProcessHelper.getProcessElementData(this.sandbox);
						this.setPrcExecDataParameters.call(this);
						callback.call(this);
				}
				};
				ProcessModuleUtilities.tryShowProcessCard.call(this, config);
			},
			/**
			 * @protected
			 * @returns {Array}
			 */
			getCustomDiff: function() {
				return [{
						"operation": "remove",
						"name": "BackButton"
					}];
			},
			/**
			 * @protected
			 * @returns {Object|parameters|*|parameters|Parameters|parameters}
			 */
			getCustomValues: function() {
				return this.prcExecData.parameters;
			},
			/**
			 *
			 * @returns {attributes|*|attributes|attributes|attributes|attributes}
			 */
			getCustomAttributes: function() {
				return this.prcExecData.attributes;
			},
			/**
			 * @overridden
			 * @param {Function} callback Эта функция будет вызвана после генерации. Входящими параметрами будут класс
			 * схемы, структура представления
			 * @param {Object} scope Контекст вызова callback-функции
			 */
			generateSchemaStructure: function(callback, scope) {
				var config = {
					schemaName: this.schemaName,
					profileKey: this.getProfileKey(),
					isProcessMode: true,
					customDiff: this.getCustomDiff(this.prcExecData),
					customAttributes: this.getCustomAttributes(this.prcExecData),
					useCache: false
				};
				this.schemaBuilder.build(config, function(viewModelClass, viewConfig) {
					callback.call(scope, viewModelClass, viewConfig);
				}, this);
			},

			/**
			 * @overidden
			 */
			getIsSeparateMode: function() {
				var historyState = this.sandbox.publish("GetHistoryState");
				var hash = historyState.hash;
				return (hash.moduleName === "ProcessCardModuleV2");
			},

			/**
			 * Создает модель представления
			 * @protected
			 * @overidden
			 * @param {Object} viewModelClass Класс модели представления схемы
			 * @return {Object} Возвращает экземпляр модели представления схемы
			 */
			createViewModel: function(viewModelClass) {
				var values = {
					IsSeparateMode: this.isSeparateMode,
					PrimaryColumnValue: this.primaryColumnValue,
					Operation: this.operation,
					IsInChain: this.isInChain,
					IsProcessMode: true,
					ProcessData: this.prcExecData
				};
				// TODO Учесть, что имена параметров процесса могут пересекаться с атрибутами из ViewModel
				Ext.apply(values, this.getCustomValues(this.prcExecData));
				var viewModel = this.Ext.create(viewModelClass, {
					Ext: this.Ext,
					sandbox: this.sandbox,
					Terrasoft: this.Terrasoft,
					values: values
				});
				if (viewModel.type === Terrasoft.SchemaType.EDIT_VIEW_MODEL_SCHEMA) {
					BusinessRulesApplier.applyDependencies(viewModel);
				}
				return viewModel;
			}
		});
		return Terrasoft.ProcessCardModule;
	}
);